pip install torch torch-geometric
from torch_geometric.data import Data
import torch

# Example node features: 3 nodes, each with 2 features
x = torch.tensor([[1, 2], [3, 4], [5, 6]], dtype=torch.float)

# Example edges: connections between nodes
edge_index = torch.tensor([[0, 1, 2],
                           [1, 2, 0]], dtype=torch.long)  # Edges (0 -> 1, 1 -> 2, 2 -> 0)

# Create the graph data object
data = Data(x=x, edge_index=edge_index)
import torch
import torch.nn.functional as F
from torch_geometric.nn import GCNConv

class GNN(torch.nn.Module):
    def __init__(self, num_node_features, hidden_channels):
        super(GNN, self).__init__()
        self.conv1 = GCNConv(num_node_features, hidden_channels)
        self.conv2 = GCNConv(hidden_channels, hidden_channels)
        self.fc = torch.nn.Linear(hidden_channels, 1)  # Output layer

    def forward(self, data):
        x, edge_index = data.x, data.edge_index
        
        # First GCN layer
        x = self.conv1(x, edge_index)
        x = F.relu(x)
        
        # Second GCN layer
        x = self.conv2(x, edge_index)
        x = F.relu(x)
        
        # Readout and fully connected layer
        x = torch.mean(x, dim=0)  # Simple readout: mean over nodes
        x = self.fc(x)
        return x
model = GNN(num_node_features=2, hidden_channels=16)
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)
loss_fn = torch.nn.MSELoss()

for epoch in range(100):
    model.train()
    optimizer.zero_grad()
    output = model(data)
    loss = loss_fn(output, torch.tensor([target_value], dtype=torch.float))  # Replace with actual target
    loss.backward()
    optimizer.step()

    print(f'Epoch {epoch+1}, Loss: {loss.item()}')
model.eval()
with torch.no_grad():
    prediction = model(data)
    print('Prediction:', prediction.item())
